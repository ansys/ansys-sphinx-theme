name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main
env:
  MAIN_PYTHON_VERSION : '3.10'
  PACKAGE_NAME: 'ansys_sphinx_theme'
  DOCUMENTATION_CNAME: 'sphinxdocs.ansys.com'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  labeler:
    name: "Labels"
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:

     - uses: actions/checkout@v4

     - name: "Update labels"
       uses: micnncim/action-label-syncer@v1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

     - name: "Label pull-request"
       uses: actions/labeler@v5.0.0
       with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        sync-labels: false


  changelog-fragment:
    name: "Create changelog fragment"
    needs: [labeler]
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
    - uses: ansys/actions/doc-changelog@v9
      if: ${{ github.event_name == 'pull_request' }}
      with:
        token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
        use-conventional-commits: true
        use-default-towncrier-config: true
        bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
        bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  code-style:
    name: Code style
    runs-on: ubuntu-latest
    needs: "changelog-fragment"
    steps:
      - name: "Run Ansys code style checks"
        uses: ansys/actions/code-style@v9
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  doc-style:
    name: Doc style
    runs-on: ubuntu-latest
    needs: "changelog-fragment"
    steps:
      - name: "Run Ansys documentation style checks"
        uses: ansys/actions/doc-style@v9
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  update-changelog:
    name: "Update CHANGELOG (on release)"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: ansys/actions/doc-deploy-changelog@v9
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  doc-build:
    name: Doc building
    runs-on: ubuntu-latest
    needs: doc-style
    steps:
      - name: "Run Ansys documentation building action"
        uses: ansys/actions/doc-build@v9
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          add-pdf-html-docs-as-assets: true
          requires-xvfb: true
          dependencies: 'pandoc'

  doc-deploy-development:
    name: Doc dev version deploy
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: build-library
    steps:
      - name: "Deploy developers documentation"
        uses: ansys/actions/doc-deploy-dev@v9
        with:
            cname: ${{ env.DOCUMENTATION_CNAME }}
            token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
            bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
            bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  doc-deploy-stable:
    name: Doc stable version deploy
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: "Deploy stable documentation"
        uses: ansys/actions/doc-deploy-stable@v9
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  smoke-tests:
    name: Build and smoke tests
    runs-on: ${{ matrix.os }}
    needs: [code-style]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']
        should-release:
          - ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags') }}
        exclude:
          - should-release: false
            os: macos-latest
    steps:
      - name: "Build wheelhouse and perform smoke test"
        uses: ansys/actions/build-wheelhouse@v9
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}
          whitelist-license-check: "Sphinx" # This has BSD licence , but check failed

  build-library:
    name: "Build library"
    runs-on: ubuntu-latest
    needs: [doc-build, smoke-tests]
    steps:
      - name: "Build library source and wheel artifacts"
        uses: ansys/actions/build-library@v9
        with:
          library-name: ${{ env.PACKAGE_NAME }}

  release:
    name: "Release project to private PyPI, public PyPI and GitHub"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [build-library, update-changelog]
    runs-on: ubuntu-latest
    steps:

      - name: "Release to the private PyPI repository"
        uses: ansys/actions/release-pypi-private@v9
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}

      - name: "Release to the public PyPI repository"
        uses: ansys/actions/release-pypi-public@v9
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYPI_TOKEN }}

      - name: "Release to GitHub"
        uses: ansys/actions/release-github@v9
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          library-name: ${{ env.PACKAGE_NAME }}
          changelog-release-notes: true

[tox]
description = Default tox environments list
envlist =
    code-style
    doc-style
    doc-{links,html,pdf,clean,serve}
    dist
    tests
skip_missing_interpreters = true
isolated_build = true
isolated_build_env = build

[testenv]
description = Run BackstopJS visual regression tests
basepython = python3
extras = doc
setenv =
    SOURCE_DIR = doc/source
    BUILD_DIR = doc/_build
    PORT = 8000
    ; BUILDER_OPTS = --color -v -j auto -W --keep-going
    BUILDER = html
deps =
    nodeenv
commands_pre =
    # Ensure node environment and dependencies are ready
    nodeenv -p
commands =
    # 1. Build Sphinx docs
    sphinx-build -d "{toxworkdir}/doc_doctree" {env:SOURCE_DIR} "{toxinidir}/{env:BUILD_DIR}/{env:BUILDER}" -b {env:BUILDER}

    # 2. Start HTTP server to serve built docs
    python -c "import subprocess, time, os; \
    build_dir = r'{toxinidir}/{env:BUILD_DIR}/{env:BUILDER}'; \
    proc = subprocess.Popen(['python', '-m', 'http.server', '{env:PORT}', '--directory', build_dir], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL); \
    open('server.pid','w').write(str(proc.pid)); \
    time.sleep(3); \
    print('Server started at', build_dir, 'PID', proc.pid)"

    # 3. Run BackstopJS tests
    npm install
    npm run test
commands_post =
    # 4. Stop HTTP server
    python -c "import os, signal, time; \
    pidfile='server.pid'; \
    pid = open(pidfile).read().strip() if os.path.exists(pidfile) else None; \
    (os.kill(int(pid), signal.SIGTERM) if pid else None); \
    time.sleep(1); \
    os.remove(pidfile) if os.path.exists(pidfile) else None; \
    print('Server stopped')"


[testenv:code-style]
description = check project code style
skip_install = true
deps =
    pre-commit
commands =
    pre-commit install
    pre-commit run --all-files --show-diff-on-failure

[testenv:doc-style]
description = Checks project documentation style
skip_install = true
allowlist_externals =
    vale
commands =
    vale sync --config="{toxinidir}/doc/.vale.ini"
    vale --config="{toxinidir}/doc/.vale.ini" "{toxinidir}/doc"

[testenv:doc-{clean,links,html,pdf,serve}]
description = Checks documentation links and pages generates properly
skip_install =
    clean: true
allowlist_externals =
    pdf: pdflatex
extras = doc
setenv =
    SOURCE_DIR = doc/source
    BUILD_DIR = doc/_build
    links: BUILDER = linkcheck
    html: BUILDER = html
    pdf: BUILDER = latex
    links,html,pdf: BUILDER_OPTS = --color -v -j auto -W --keep-going
commands =
    links,html,pdf: sphinx-build -d "{toxworkdir}/doc_doctree" {env:SOURCE_DIR} "{toxinidir}/{env:BUILD_DIR}/{env:BUILDER}" {env:BUILDER_OPTS} -b {env:BUILDER}
    clean: python -c "import shutil, sys; shutil.rmtree(sys.argv[1], ignore_errors=True)" "{toxinidir}/{env:BUILD_DIR}"
    serve: stb serve "{toxinidir}/{env:SOURCE_DIR}/"

[testenv:dist]
description = Checks project distribution
skip_install = true
deps =
    build
commands =
    python -m build {toxinidir}

